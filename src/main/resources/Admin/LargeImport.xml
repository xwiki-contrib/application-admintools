<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>LargeImport</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>Admin.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1375188483000</creationDate>
<date>1375188483000</date>
<contentUpdateDate>1375188483000</contentUpdateDate>
<version>1.1</version>
<title>LargeImport</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{groovy}}
import com.xpn.xwiki.*;
import com.xpn.xwiki.doc.*;
import com.xpn.xwiki.plugin.packaging.*;
import java.util.zip.*;
import com.xpn.xwiki.util.Util;

finalPageName = ""
exception = ""

def updateDoc(String newname, InputStream xml, String type, XWikiContext xcontext)
{
  try {
    def fdoc = new XWikiDocument()

    if ((type == "NOOVERVERSIONS") || (type == "OVERVERSIONS")) {
      fdoc.fromXML(xml, true);
    } else {
      fdoc.fromXML(xml, false);
    }

    int nbAttachments = fdoc.getAttachmentList().size();
    System.out.println("|____ Document: " + fdoc.getFullName() + "-" + fdoc.getLanguage() + "-" + fdoc.getDefaultLanguage() + " - " + fdoc.getVersion() + " - ${nbAttachments} attachments");

    if (newname == "")
      newname = fdoc.getFullName()

    def prevDoc =  xcontext.getWiki().getDocument(newname, xcontext);
    def prevArchive = prevDoc.getDocumentArchive();

    if (prevDoc.isNew() || ((type != "NOOVERVERSIONS") &amp;&amp; (type != "NOOVERNOVERSIONS"))) {
      // We need to verify the document has the right name
      // Otherwise we might override something we don't expect
      if ((newname != "") &amp;&amp; (fdoc.fullName != newname)) {
        fdoc = fdoc.copyDocument(newname, xcontext);
      }

      finalPageName =  fdoc.getFullName()
 
      if (type == "ADDVERSION") {
        fdoc.setDocumentArchive(prevArchive);
        xcontext.getWiki().saveDocument(fdoc, xcontext);
        if (prevDoc.isNew()) {
          fdoc.resetArchive(xcontext);
        }

        return 1;
      } else {
        def pack = new Package()
        if ((type == "NOOVERVERSIONS") || (type == "OVERVERSIONS"))
          pack.setWithVersions(true)
        else
          pack.setWithVersions(false)

        pack.setBackupPack(true)
        pack.add(fdoc, 0, xcontext)

        return pack.install(xcontext)
      }
    } else {
      return -1000;
    }
  } catch (Throwable e) {
    exception = e.getMessage()

    return -2000;
  }
}

def updateDoc(ZipFile zipfile, ZipEntry zipentry, String newname, String type, XWikiContext xcontext)
{
  def is = zipfile.getInputStream(zipentry)
  def ret = updateDoc("", is, type, xcontext);

  if (ret &lt; 0) {
    if (ret == -1000) {
      System.err.println("* Document for entry ${zipentry} already exists and overwrite was not specified.")
      println "* Document for entry ${zipentry} already exists and overwrite was not specified.";
    } else if (ret == -2000) {
      System.err.println("* Document for entry ${zipentry} could not be imported with exception (${exception})")
      println "* Document for entry ${zipentry} could not be imported with exception (${exception})";
    } else {
      System.err.println("* Document for entry ${zipentry} could not be imported with error ${ret}.")
      println "* Document for entry ${zipentry} could not be imported with error ${ret}.";
    }
  } else {
    System.out.println("__ Document for entry ${zipentry} has been imported properly: [${finalPageName}].")
    println "* Document for entry ${zipentry} has been imported properly: [[${finalPageName}]]."
  }
}

if (request.get("filename") != null &amp;&amp; request.get("confirm") == null) {

println """
{{html clean="false"}}
&lt;script type="text/javascript"&gt;
function selectItems(classId, selected)
{
  var docs = document.getElementsByClassName(classId);
  var i;
  for (i = 0; i &lt; docs.length; i++)
  {
    var doc = docs[i];
    doc.checked = selected;
  }
}
&lt;/script&gt;

 &lt;form action="" method="post"&gt;
 &lt;input type="hidden" name="filename" value="${request.filename}" /&gt;
 &lt;input type="hidden" name="confirm" value="1" /&gt;
"""

  def counter = 0;
  def time1 = new Date()
  if (request.get("importall") == null) {
    def time2 = new Date()

println """
  &lt;span id="selectDocsActions"&gt;
    &lt;a href="javascript:void()" onclick="selectItems('selCheckedDoc', false); return false;" class="Exportlink"&gt;Unselect All&lt;/a&gt;,
    &lt;a href="javascript:void()" onclick="selectItems('selCheckedDoc', true); return false;" class="Exportlink"&gt;Select All&lt;/a&gt;
  &lt;/span&gt;
  &lt;table border="0" cellspacing="0" cellpadding="0"&gt;
"""

    def file = new File(request.get("filename"));
    def zipfile = new ZipFile(file);
    for (zipentry in zipfile.entries()) {
      filename = zipentry.name
      if (!filename.endsWith("package.xml") &amp;&amp; !zipentry.isDirectory()) {
        counter++;

println """
      &lt;tr&gt;&lt;td&gt;&lt;input class="selCheckedDoc" type="checkbox" name="file_${counter}" value="${filename}" checked /&gt;${filename}&lt;/td&gt;&lt;/tr&gt;
"""
      }
    }

println """
  &lt;/table&gt;
"""

  def dur = time2.getTime() - time1.getTime()

  println "* Duration: $dur"
  } else {

println """
    Import all
    &lt;input type="hidden" name="importall" value="1" /&gt;
"""

  }

println """
  &lt;table border="0" cellspacing="0" cellpadding="0"&gt;
    &lt;tr&gt;
      &lt;td&gt;Type:&lt;/td&gt;
      &lt;td&gt;
        &lt;input type="radio" name="type" value="NOOVERVERSIONS" /&gt; Do Not overwrite with versions
        &lt;input type="radio" name="type" value="NOOVERNOVERSIONS" /&gt; Do Not overwrite without versions
        &lt;br /&gt;
        &lt;input type="radio" name="type" value="ADDVERSION" /&gt; Add version
        &lt;input type="radio" name="type" value="OVERVERSIONS" checked /&gt; Overwrite with version
        &lt;input type="radio" name="type" value="OVERNOVERSIONS" /&gt; Overwrite without versions
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td colspan="2" align="center"&gt;
        &lt;input type="hidden" name="counter" value="${counter}" /&gt;
        &lt;input type="submit" name="Preview" /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/form&gt;
{{/html}}
"""

} else if (request.get("filename") != null &amp;&amp; request.get("confirm") != null) {
  def file = new File(request.get("filename"));

  System.out.println("Start importing file [" + file + "]");

  def zipfile = new ZipFile(file);

  def type = request.get("type");

  def counter = 1;
  if (request.get("importall") == null) {
    def maxcounter = Integer.parseInt(request.counter)

    while (counter &lt;= maxcounter) {
      def filename = request.get("file_${counter}")

      if (filename != null) {
        def zipentry = zipfile.getEntry(filename)
        if (zipentry != null) {
          System.out.println("Import ${counter}/${maxcounter}: " + filename);
          updateDoc(zipfile, zipentry, "", type, xcontext.context)
        }
      }

      counter++;
    }
  } else {
    def maxcounter = zipfile.size()

    for (zipentry in zipfile.entries()) {
      def filename = zipentry.name

      if (!filename.endsWith("package.xml") &amp;&amp; !zipentry.isDirectory()) {
        System.out.println("Import ${counter}/${maxcounter}: " + filename);

        updateDoc(zipfile, zipentry, "", type, xcontext.context)
      }

      counter++;
    }
  }

  counter--;
  System.out.println("Finished importing ${counter} documents");
  println "* Finished importing ${counter} documents"
} else {

println """
{{html clean="false"}}
&lt;form action="" method="post"&gt;
  &lt;table border="0"&gt;
    &lt;tr&gt;
      &lt;td&gt;File to read from:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="filename" size="60" /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td colspan="2" align="center"&gt;
        &lt;input type="submit" name="Preview" /&gt;
        &lt;input type="checkbox" name="importall" value="1" /&gt; Import all
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/form&gt;
{{/html}}
"""

}
{{/groovy}}</content></xwikidoc>
