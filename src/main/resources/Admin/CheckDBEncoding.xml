<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>CheckDBEncoding</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>Admin.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1375903656000</creationDate>
<date>1375906464000</date>
<contentUpdateDate>1375906397000</contentUpdateDate>
<version>1.1</version>
<title>MySQL Encoding Check</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{groovy}}


def context = xcontext.getContext();
def store = xwiki.getXWiki().getStore().getStore();
if(services.wikimanager) {
    wikilist = services.wikimanager.getAllWikis()
} else {
    wikilist = [xcontext.getDatabase()]
}

def indexes = xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("\n")

println "== General db settings =="

try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show variables like 'character_set_%'");
  def rset = stmt.getResultSet();
  def result = null;
  
  while (rset.next()) {
    def varname = rset.getString(1);
    def varvalue = rset.getString(2);
    if (varname!="character_sets_dir") {
      println "* MYSQL encoding setting ${varname}: ${varvalue}"
    }
  }
  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check mysql encoding:{{/error}} " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}

println "== General db collation settings =="

try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show variables like 'collation%'");
  def rset = stmt.getResultSet();
  def result = null;
  
  while (rset.next()) {
    def varname = rset.getString(1);
    def varvalue = rset.getString(2);
      println "* MYSQL collation setting ${varname}: ${varvalue}"
  }
  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check mysql encoding:{{/error}} " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}

println "== Encoding settings by wiki =="

for(wiki in wikilist) {

// check database encoding
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show create database ${wiki}");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getString(2);
  } catch (Exception e2) { println '' }

  // println result
  def i1 = result.indexOf("DEFAULT CHARACTER SET")
  def i2 = result.indexOf("*", i1)
  if (result!=null &amp;&amp; i1!=-1) {
   def enc = result.substring(i1 + 22, i2);
   println "* database encoding of ${wiki} is ${enc}" 
  } else {
   println "* {{error}}Could not find xwikidoc encoding for wiki ${wiki}{{/error}}"
  }
  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check xwikidoc encoding for wiki ${wiki}: {{/error}} " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}



// check xwikidoc table encoding
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show create table ${wiki}.xwikidoc");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getString(2);
  } catch (Exception e2) {}

  // println result
  def i1 = -1;
  def i2 = -1;
  i1 = result.indexOf("DEFAULT CHARSET=");
  if (i1!=-1) {
   i2 = result.indexOf(" ", i1 + 16);
  }
  if (result!=null &amp;&amp; i1!=-1) {
   def enc = (i2==-1) ? result.substring(i1 + 16) : result.substring(i1 + 8, i2);
   println "* encoding of xwikidoc of ${wiki} is ${enc}" 
  } else {
   println "* {{error}}Could not find xwikidoc encoding for wiki ${wiki}{{/error}}"
  }

  i1 = result.indexOf("COLLATE=")
  if (i1!=-1) {
   i2 = result.indexOf(" ", i1+8)
  }
  if (result!=null &amp;&amp; i1!=-1) {
   def enc = (i2==-1) ? result.substring(i1 + 8) : result.substring(i1 + 8, i2);
   println "* collation of xwikidoc of ${wiki} is ${enc}" 
  } else {
   println "* {{error}}Could not find xwikidoc collation for wiki ${wiki}{{/error}}"
  }

  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check xwikidoc encoding or collation for wiki ${wiki}{{/error}}: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}



}

{{/groovy}}</content></xwikidoc>
