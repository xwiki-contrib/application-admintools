<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>Export</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>Admin.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1375188480000</creationDate>
<date>1375188480000</date>
<contentUpdateDate>1375188480000</contentUpdateDate>
<version>1.1</version>
<title>Export</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<content>#set($action = $request.action)
#if ($action == "getdocs")
$response.setContentType("text/xml")
#set($space = $request.spacename)
&lt;response&gt;
  #set($docs = $xwiki.searchDocuments("where doc.web='$request.spacename' order by doc.date desc"))
  #foreach ($docname in $docs)
    &lt;value&gt;$escapetool.xml("${docname}")&lt;/value&gt;
  #end
&lt;/response&gt;
#elseif ($action == "getPackageList")
  $response.setContentType("text/xml")
  #set($alist = $doc.getAttachmentList())
&lt;response&gt;
  #foreach ($oAttach in $alist)
    &lt;value&gt;$oAttach.getFilename()&lt;/value&gt;
  #end
&lt;/response&gt;
#elseif ($action == "preexport")
  #set($ToExport = $request.getParameterValues("toExport"))
  #set($session = $request.getSession(false))
  #set($ok = $session.setAttribute("exportdata", $ToExport))
OK
#elseif ($action == "export")
  #set($session = $request.getSession(false))
  #set($ToExport = $session.getAttribute("exportdata"))
  #set($withHistory = $request.withHistory)
  #set($author = $request.author)
  #set($description = $request.description)
  #set($licence = $request.licence)
  #set($version = $request.version)
  #set($packageName = $request.packageName)

  #set($export = $xwiki.package)

  #if ($withHistory=="true")
    $export.setWithVersions(true)
  #else
    $export.setWithVersions(false)
  #end
  #if ($author)
    $export.setAuthorName($author)
  #end
  #if ($description)
    $export.setDescription($description)
  #end

  #if ($licence)
    $export.setLicence($licence)
  #end

  #if ($version)
    $export.setVersion($version)
  #end

  $export.setName($packageName)
  #foreach ($itemexp in $ToExport)
    $export.add($itemexp, 0)
  #end
  $export.export()
#else
{pre}
&lt;style type="text/css"&gt;
.main table tr td.td-docSelectorColumn, .main table tr td.td-selectedColumn,, .main table tr td.td-packageColumn {
 vertical-align: top;
}
#spaceDocs, #selectedDocs {
 height: 400px;
 overflow-y: scroll;
}
&lt;/style&gt;
&lt;div id="exportApp"&gt;
&lt;table style="width:100%; border-color:blue; border-spacing: 0; " border="0"&gt;
&lt;tr&gt;
&lt;td class="td-docSelectorColumn"&gt;&lt;h3 style="text-align:center;" id="firstColumnTitle"&gt;Your Wiki&lt;/h3&gt;
&lt;span id="spaceSelectorEl"&gt;  
 Select a Space: 
  #set($spaces = $xwiki.getSpaces())
  &lt;select name="spaceSelector" id="spaceSelector"&gt;
  &lt;option value="---"&gt;---&lt;/option&gt;
  #foreach ($space in $spaces)
    &lt;option value="$space"&gt;$space&lt;/option&gt;
  #end
  &lt;/select&gt;
  &lt;br /&gt;
  #set($script = $xwiki.getURL("Admin.ExportSpaceSuggest", "view", "xpage=rdf"))
 &lt;form action="" onsubmit="setSpace(this.space.value); return false;"&gt;
 Search space: &lt;input type="text" name="space" value="" size="20"  onfocus="new ajaxSuggest(this, {script:'${script}&amp;amp;', varname: 'input', seps:'', offsety: 13});" /&gt;
  &lt;input type="submit" value="Go" /&gt;
 &lt;/form&gt;
  &lt;br /&gt;
&lt;span class="selectDocsActions"&gt;Select &lt;a onclick="selectItems('checkedDoc', false);" class="Exportlink"&gt;none&lt;/a&gt;, &lt;a onclick="selectItems('checkedDoc', true);" class="Exportlink"&gt;all&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td class="td-selectedColumn"&gt;&lt;h3 style="text-align:center;" id="secondColumnTitle"&gt;Your Package&lt;/h3&gt;
&lt;span class="selectDocsActions"&gt;Select &lt;a onclick="selectItems('selCheckedDoc', false);" class="Exportlink"&gt;none&lt;/a&gt;, &lt;a onclick="selectItems('selCheckedDoc', true);" class="Exportlink"&gt;all&lt;/a&gt;&lt;/span&gt;
&lt;/td&gt;
&lt;td class="td-packageColumn"&gt;
&lt;h3 style="text-align:center;" id="secondColumnTitle"&gt;Package Info&lt;/h3&gt;
&lt;/td&gt;
&lt;/tr&gt;
## ROW 2
&lt;tr&gt;
&lt;td class="td-docSelectorColumn"&gt;
&lt;div id="docSelectorColumn"&gt;
  &lt;div id="spaceDocs"&gt;
  &lt;span id="noSelectedSpace"&gt;&lt;br /&gt;&lt;br /&gt;Start by choosing a space to list documents&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td class="td-selectedColumn"&gt;
&lt;div id="selectedColumn"&gt;
  &lt;div id="spaceDocs"&gt;
  &lt;table&gt;
   &lt;tbody  id="selectedDocsTable"&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td class="td-packageColumn"&gt;
&lt;label for="appName"&gt;&lt;i&gt;Package Name&lt;/i&gt;&lt;/label&gt;&lt;br /&gt;&lt;input type="text" name="appName" id="appName" value="package"&gt;&lt;br /&gt;&lt;br /&gt;
&lt;label for="appDesc"&gt;&lt;i&gt;Description&lt;/i&gt;&lt;/label&gt;&lt;br /&gt;&lt;textarea name="appDesc" id="appDesc"&gt;&lt;/textarea&gt;&lt;br /&gt;&lt;br /&gt;
&lt;label for="appLicence"&gt;&lt;i&gt;Licence&lt;/i&gt;&lt;/label&gt;&lt;br /&gt;&lt;input type="text" name="appLicence" id="appLicence" value="LGPL"&gt;&lt;br /&gt;&lt;br /&gt;
&lt;label for="appAuthor"&gt;&lt;i&gt;Author&lt;/i&gt;&lt;/label&gt;&lt;br /&gt;&lt;input type="text" name="appAuthor" id="appAuthor" value="$context.user"&gt;&lt;br /&gt;&lt;br /&gt;
&lt;label for="appVersion"&gt;&lt;i&gt;Version&lt;/i&gt;&lt;/label&gt;&lt;br /&gt;&lt;input type="text" name="appVersion" id="appVersion" value=""&gt;&lt;br /&gt;&lt;br /&gt;
&lt;span id="historyEls"&gt;
&lt;label for="appWithHistory"&gt;&lt;i&gt;Add history&lt;/i&gt;&lt;input type="checkbox" name="appWithHistory" id="appWithHistory" value="true"&gt;&lt;/label&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;
## ROW 3
&lt;tr&gt;
&lt;td class="td-docSelectorColumn" style="text-align: center;"&gt;&lt;input type="button" onclick="addDocs();" id="bttAdd" value="Add to my package &amp;gt;&amp;gt;"/&gt;&lt;/td&gt;
&lt;td class="td-selectedColumn" style="text-align: center;"&gt;&lt;input type="button" onclick="deleteDocs();" id="bttAdd" value="&amp;lt;&amp;lt; Remove from my package"/&gt;&lt;/td&gt;
&lt;td class="td-packageColumn" style="text-align: center;"&gt;&lt;input type="button" id="bttExport" onclick="bttExport()" value="Export" style=""/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
Ajax.XWikiRequest = Class.create(Ajax.Request, {
    initialize: function($super, space, docName, options, action) {
    this.transport = Ajax.getTransport();
    if (action)
      this.action = action;
    else
      this.action = "view";
    this.baseUrl = "/${xwiki.webAppPath}/${xwiki.servletPath}/" + this.action;

    options = Object.clone(options);
    var onComplete = options.onComplete || Prototype.emptyFunction;
    options.onComplete = (function() {
       this.returnValue(onComplete);
       //onComplete(this.transport);
    }).bind(this);

    $super(this.generateUrl(space, docName), options);
  },
  generateUrl: function(space, docName){
        return new XWiki.Document(docName, space).getURL('get');
  },
  returnValue: function(callBack) {
    if (callBack)
        callBack(this);
    else
        alert("error, callback");
  }
});

	//declaring the class
	var SelectWatcher = Class.create();

	//defining the rest of the class implmentation
	SelectWatcher.prototype = {

	   initialize: function(selBox, callBack) {
			this.selBox = $(selBox);
			//assigning our method to the event
			this.selBox.onchange = callBack.bindAsEventListener(this);
	   }

	};
        var watcher = new SelectWatcher("spaceSelector", selectOptionCallBack);

       function selectOptionCallBack(evt)
       {
         setSpace(this.selBox.options[this.selBox.selectedIndex].value);
       }
      
     function setSpace(space)
       {
         var pars = "action=getdocs&amp;spacename=" + space + "&amp;xpage=rdf";
         var myAjax = new Ajax.XWikiRequest( "$doc.web", "$doc.name", {method: 'get', parameters: pars, onComplete: showDocs} );
       }

      function showDocs(res)
      {
        var tableName = "listTable";
        var tableEl = $(tableName);
        if (tableEl)
          Element.remove(tableName);
        createTable(tableName, "spaceDocs");
        var xml = res.transport.responseXML;
        var docNodes = xml.getElementsByTagName("value");
        var noSelectedEl = $("noSelectedSpace");
        if (noSelectedEl&amp;&amp;noSelectedEl.parentNode)
         noSelectedEl.parentNode.removeElement(noSelectedEl);
        for (var i = 0; i &lt; docNodes.length; i++)
        {
          insertTableRow(tableName, docNodes[i].firstChild.data, "doc");
        }
      }

       function showImportList()
       {
         var pars = "action=getPackageList&amp;xpage=rdf";
         var myAjax = new Ajax.XWikiRequest( "$doc.web", "$doc.name", {method: 'get', parameters: pars, onComplete: showPackageList} );
       }

      function showPackageList(res)
      {
        var tableName = "listTable";
        var tableEl = $(tableName);
        if (tableEl)
          Element.remove(tableName);
        createTable(tableName, "spaceDocs");
        var xml = res.responseXML;
        var packageNodes = xml.getElementsByTagName("value");
        for (var i = 0; i &lt; packageNodes.length; i++)
        {
          insertTableRow(tableName, packageNodes[i].firstChild.data, "pack");
        }
      }


      function createTable(id, parent){
         $(parent).innerHTML = "&lt;table id=" + id + "&gt;&lt;/table&gt;";
      }


      function insertTableRow(id, name, type){
         if (type == "doc")
           new Insertion.Bottom(id, "&lt;tr&gt;&lt;td&gt;" + name + "&lt;/td&gt;&lt;td&gt;&lt;input type='checkbox' value='"+name+"' id='check_" + name + "' class='checkedDoc'/&gt;&lt;/td&gt;&lt;/tr&gt;");
         else if (type == "pack")
           new Insertion.Bottom(id, "&lt;tr&gt;&lt;td&gt;&lt;a onclick='selectPackage(\""+ name +"\")' class='Exportlink'&gt;" + name + "&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;");
      }

      function insertNewSelectedDoc(id, value)
      {
         insertNewDoc(id, value, 0)
      }

      function insertNewDoc(id, value)
      {
         new Insertion.Bottom(id, "&lt;tr class='selCheckedTR' id='tr_" + value + "'&gt;&lt;td&gt;&lt;input type='checkBox' value='" + value + "' class='selCheckedDoc' id='" + value + "' /&gt;&lt;span id='" + value + "' class='exportDocName'&gt;" + value + "&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;");
      }

      function deleteDocs()
      {
        var docs = document.getElementsByClassName("selCheckedDoc");
        var i;
        for (i = docs.length-1; i &gt;= 0; i--)
         {
             var doc = docs[i];
             if (doc.checked)
               Element.remove(doc.parentNode.parentNode);
         }
      }


      function addDocs()
      {
         var docs = document.getElementsByClassName("checkedDoc");
         var i;
         for (i = 0; i &lt; docs.length; i++)
           {
             var doc = docs[i];
             if (doc.checked == true)
              insertNewSelectedDoc("selectedDocsTable", doc.value)
           }
      }

      var exporturl = "";

      function bttExport()
      {
         var docs = document.getElementsByClassName("exportDocName");
         var i;
         // url used after the post call is made to post the list of pages
         exporturl = "?action=export&amp;withHistory=" + $F("appWithHistory") + "&amp;version=" + $F("appVersion") + "&amp;author=" + $F("appAuthor") + "&amp;description=" + $F("appDesc") + "&amp;licence=" + $F("appLicence") + "&amp;packageName=" + $F("appName");

         var pars = "action=preexport&amp;xpage=rdf";
         for (i = 0; i &lt; docs.length; i++)
         {
             var docname = docs[i].innerHTML;
             pars = pars + "&amp;toExport=" + docname;
         } 
         var myAjax = new Ajax.XWikiRequest( "$doc.web", "$doc.name", {method: 'post', parameters: pars, onComplete: bttExportComplete } );
      }

      function bttExportComplete(xmlResponse) 
      {
         window.location = exporturl;
      }

      function selectItems(classId, selected)
      {
         var docs = document.getElementsByClassName(classId);
         var i;
         for (i = 0; i &lt; docs.length; i++)
           {
             var doc = docs[i];
             doc.checked = selected;
           }
      }

      function getXmlValue(tag, xml)
      {
        var nodes = xml.getElementsByTagName(tag);
        if (nodes.length &gt; 0 &amp;&amp; nodes[0].firstChild)
          return nodes[0].firstChild.data;
        else
          return "";
      }

&lt;/script&gt;
{/pre}
#end</content></xwikidoc>
