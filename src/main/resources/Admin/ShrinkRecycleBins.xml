<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>ShrinkRecycleBins</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Admin.Tools</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1317648634000</creationDate>
<date>1317997680000</date>
<contentUpdateDate>1317997680000</contentUpdateDate>
<version>1.1</version>
<title>Shrink Recycle Bins</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<content>{{groovy}}
import com.xpn.xwiki.doc.XWikiAttachment;
import com.xpn.xwiki.XWikiException;

// Utility method to run a query
// return the result as a List of Maps or the Exception
def runQuery(query) {
  def context2 = xcontext.getContext()
  def store = xwiki.getXWiki().getStore().getStore()
  store.beginTransaction(context2)
  def session = store.getSession(context2)
  def connection = session.connection()
  def stmt = connection.createStatement()
  def list = new ArrayList()
  try {
    def resultset = stmt.executeQuery(query)
    def mdata = resultset.getMetaData()
    def nbcols = mdata.getColumnCount()
    while (resultset.next()) {
      def map = new HashMap()
      for (i=1;i&lt;=nbcols;i++) {
        def value = resultset.getObject(i)
        if (value==null)
          value = ""
        map.put(mdata.getColumnName(i), value)
      }
      list.add(map)
    }
  } catch (Exception ex) {
    println "Error running sql: ${sql} " + ex.getMessage()
    return ex
  } finally {
    stmt.close()
    store.endTransaction(context2, true)
  }
  return list
}

// Utility method to test MySQL database
def isMySQL() {
  def store = xwiki.getXWiki().getStore().getStore()
  store.beginTransaction(xcontext.context)
  def db = store.getDatabaseProductName(xcontext.context)
  store.endTransaction(xcontext.context, true)
  return db.equals(com.xpn.xwiki.store.DatabaseProduct.MYSQL)
}

def Float getMySQLSpaceUsed(table, wiki) {
  def mwikiquery = (wiki=="") ? "" : "AND TABLE_SCHEMA = '${wiki}'"
  def query = (table=="") ? "SELECT SUM(DATA_LENGTH)/1024/1024 as 'space' FROM INFORMATION_SCHEMA.TABLES  WHERE 1=1 ${mwikiquery}" : "SELECT SUM(DATA_LENGTH)/1024/1024 as 'space' FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME='${table}' ${mwikiquery}"
  def spaceLeftResult = runQuery(query)
  if (spaceLeftResult.size()==0 || spaceLeftResult.get(0).get("space")==null)
    return -1f
  return (Float)(spaceLeftResult.get(0).get('space'))
}

def getAgeWhereClause(age) {
  return (new Date() - age + 1).format('yyyy-MM-dd')
}

// Return figures about the 2 recycle bins (-1 is for error) 
def getFigures(wiki, age) {
  def result = [ 'docNb':-1i, 'docSize':-1i, 'attNb':-1i, 'attSize':-1i]
  if (wiki=="") return result
  xcontext.setDatabase(wiki)
  // Get the doc recycle bin figures
  def qry = "select count(doc) from XWikiDeletedDocument doc where doc.date &lt; '${getAgeWhereClause(age)}'"
  try {
    def rs = services.get("query").hql(qry).execute()
    result.putAt('docNb', rs.get(0))
  } catch (Exception e) {}
  // Get the attachment recycle bin figures
  qry = "select count(doc) from DeletedAttachment doc where doc.date &lt; '${getAgeWhereClause(age)}'"
  try {
    def rs = services.get("query").hql(qry).execute()
    result.putAt('attNb', rs.get(0))
  } catch (Exception e) {}
  xcontext.setDatabase(xcontext.getOriginalDatabase())
  return result
}

// Delete the trashed documents
def emptyDocBin(wiki, age) {
  if (wiki=="")
    return "?"
  xcontext.setDatabase(wiki)
  def workWiki = xcontext.getXWiki()
  def qry = "select doc.fullName from XWikiDeletedDocument doc where doc.date &lt; '${getAgeWhereClause(0)}'"
  println '**Deleted documents**'
  try {
    services.get("query").hql(qry).execute().each() { docName -&gt;
      workWiki.getDeletedDocuments(docName, '', xcontext.context).each{
        if (it.getDate()&lt;(new Date() - age + 1)) {
          print it.fullName + ' '
          workWiki.getRecycleBinStore().deleteFromRecycleBin(
              workWiki.getDocument(it.fullName, xcontext.context),
              it.getId(),
              xcontext.context,
              true);
        }
      }
    }
  } catch (XWikiException xe) {
    print xe.message
  } finally {
    xcontext.setDatabase(xcontext.getOriginalDatabase())
  }
  println ' '
}


// Delete the trashed files
def emptyAttBin(wiki, age) {
  if (wiki=="")
    return "?"
  xcontext.setDatabase(wiki)
  def workWiki = xcontext.getXWiki()
  def context2 = xcontext.context
  println '**Deleted files**'
  try {
    def allDeletedAttachments = workWiki.getAttachmentRecycleBinStore().getAllDeletedAttachments((XWikiAttachment)null, context2, true)
    allDeletedAttachments.each{
      if (it.getDate()&lt;(new Date() - age + 1)) {
        print it.filename + ' '
        workWiki.getAttachmentRecycleBinStore().deleteFromRecycleBin(it.id, context2, true)
      }
    }
  } catch (XWikiException xe) {
    print xe.message
  } finally {
    xcontext.setDatabase(xcontext.getOriginalDatabase())
  }
  println ' '
}

// Include a drop-down list generating the 'n' (NewerThan) parameter
def printNewerWidget(wiki, current) {
  def listOfDays = [0, 1, 7, 30, 100, 366]
  if (current==null) {
    current = 30
  }
  println '\n{{html}}\n&lt;form action="" method="get"&gt;&lt;div&gt;'
  println '&lt;input type="hidden" name="w" value="' + wiki + '" /&gt;'
  println 'Excluding items newer than &lt;select name="n" onchange="document.getElementById(\'idWarn\').style.textDecoration=\'line-through\';"&gt;'
  listOfDays.each{
    print '&lt;option value="' + it + '" '
    if (current == it) print 'selected="selected"';
    println "&gt;${it}&lt;/option&gt;"
  }
  println '&lt;/select&gt; days. &lt;input type="submit" value="change"/&gt;&lt;/div&gt;&lt;/form&gt;\n{{/html}}\n'
}

def showWikiBins(wiki) {
  print '&lt;tr&gt;&lt;td&gt;&lt;a href="' + doc.getName() +'?w=' + wiki + '"&gt;' + wiki
  if (wiki=="xwiki")
    println '&lt;/a&gt; (main wiki)&lt;/td&gt;'
  else
    println '&lt;/a&gt;&lt;/td&gt;'
  Float sizeD = getMySQLSpaceUsed("xwikirecyclebin", wiki)
  Float sizeA = getMySQLSpaceUsed("xwikiattrecyclebin", wiki)
  println '&lt;td style="text-align:right"&gt;' + String.format('%7.1f', sizeD) + '&lt;/td&gt;'
  println '&lt;td style="text-align:right"&gt;' + String.format('%7.1f', sizeA) + '&lt;/td&gt;'
  println '&lt;td style="text-align:right"&gt;' + String.format('%7.1f', (sizeD + sizeA)) + '&lt;/td&gt;&lt;/tr&gt;'
}

// In a farm context, displays the size of the recycle bins for all the wikis
def displayRecycleBins() {
  if (!isMySQL()) {
    println '**Sorry, this script can\'t be run if the XWiki farm database is NOT MySQL.**'
    return
  }
  xwiki.ssfx.use("js/xwiki/table/table.css")
  xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true)
  println '= Recycle Bins Size (in Mega Bytes) ='
  println '{{html}}'
  println '&lt;table id="bins" class="grid sortable doOddEven"&gt;' 
  println '&lt;tr class="sortHeader"&gt;&lt;th&gt;Wiki&lt;/th&gt;&lt;th&gt;Page Recycle bin&lt;/th&gt;&lt;th&gt;Attachment Recycle bin&lt;/th&gt;&lt;th&gt;Total&lt;/th&gt;&lt;/tr&gt;'

  def wikilist = ['xwiki'];
  if (xwiki.wikimanager != null) // wiki is virtual but wikimanager is not installed
    wikilist = xwiki.wikimanager.getAllWikis().sort{it.toString()}
  for (wiki in wikilist) {
    showWikiBins(wiki.toString())
  }
  println '&lt;/table&gt;'
  println '{{/html}}'
}

// The script starts here
def wParam = request.get("w") // Wiki name specified using the url parameter "w"
def nParam = request.get("n") // Exclude NewerThan specified using the url parameter "n"
Integer nValue = 30i // Default value is 30 days
if (nParam) {
  try { nValue=nParam.toInteger() } catch(exc) {}
}
if (wParam) {
  if (request.confirmation) {
    println "= Empty the 2 recycle bins of //${wParam}// ="
    emptyDocBin(wParam, nValue)
    emptyAttBin(wParam, nValue)
    println '\n\n[[Done&gt;&gt;' + doc.name + ']]'
  } else {
    def figures = getFigures(wParam, nValue)
    println "= Empty the 2 recycle bins of //${wParam}// ? ="
    printNewerWidget(wParam, nValue)
    if ((figures.docNb + figures.attNb) &gt; 0) {
      println """\
        {{html clean="false"}}
        &lt;p id="idWarn"&gt;Please, confirm that you will permanently delete &lt;b&gt;${figures.docNb}&lt;/b&gt; documents and &lt;b&gt;${figures.attNb}&lt;/b&gt; attachments.&lt;/p&gt;
        &lt;form action="${doc.getURL('view', 'w=' + wParam +'&amp;n=' + nValue)}" method="post"&gt;&lt;div&gt;
        &lt;input type="hidden" name="confirmation" value="1" /&gt;
        &lt;span class="buttonWrapper"&gt;&lt;input type="submit" class="button" value="Yes, I confirm" /&gt;&lt;/span&gt;
        &lt;/div&gt;&lt;/form&gt;
        {{/html}}
      """
      println ' '
      println 'I prefer to [[go back&gt;&gt;' + doc.name + ']]'
    } else {
      println '(% id="idWarn"%)(((**Nothing to delete** in the //' + wParam + '// recycle bins.)))'
      println ' '
      println '[[Return&gt;&gt;' + doc.getName() + ']]'
    }
  }
} else {
  if (!xwiki.isVirtual()) {
    response.sendRedirect(xwiki.getURL(doc.name) + '?w=' + xcontext.database)
    return
  }
  displayRecycleBins()
}
{{/groovy}}</content></xwikidoc>
